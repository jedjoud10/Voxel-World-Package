// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel VoxelMain
#pragma kernel VoxelNormal
#include "./GenerationShaders/Others/SDFFunctions.cginc"
#include "./GenerationShaders/Others/noises/base.cginc"
#include "./GenerationShaders/Others/noises/cellular3D.cginc"
#include "./GenerationShaders/Others/noises/noise3D.cginc"
#include "./GenerationShaders/Others/noises/erosionnoise.cginc"

//Base values
float3 offset;
float3 scale;
float chunkScaling;
int resolution;
float quality;

//Data stuff
struct Voxel
{
    float density;
    float3 color;
    float3 normal;
    float smoothness;
    float metallic;
};
RWStructuredBuffer<Voxel> buffer;
RWTexture2D<float3> animeTexture;
//Example generator
float Density(float3 p, float3 lp)
{
    float noiseDensity = 0;
    float maxNoiseDensity = 0;
    for (int i = 0; i < 3 * quality; i++)
    {
        noiseDensity += (cellular((p * 0.002 + 5).y * pow(2, i) * float3(1, 1, 1)) * pow(0.5, i));
        maxNoiseDensity += pow(0.5, i);
    }
    noiseDensity /= maxNoiseDensity;
    noiseDensity = 1 - cellular(p * 0.002 + 5).y > 0;
    return p.y + noiseDensity * 600;
}
//The color function
float3 Color(float3 p, float3 lp, float3 n)
{
    float3 color = n;
    return color;
}
//The metallic function
float Metallic(float3 p, float3 lp, float3 n)
{
    return 0;
}
//The Smoothness function
float Smoothness(float3 p, float3 lp, float3 n)
{
    return 0;
}
int flt(uint3 pos) { return (pos.z * resolution * resolution) + (pos.y * resolution) + pos.x; }

[numthreads(8, 8, 8)]
void VoxelMain(uint3 id : SV_DispatchThreadID)
{
    float3 p = (id * chunkScaling + offset) * scale;

    Voxel voxel;
    voxel.density = Density(p, id / (float)resolution);
    voxel.normal = 1;
    voxel.color = 1;
    voxel.metallic = 0;
    voxel.smoothness = 0;
    buffer[(id.z * resolution * resolution) + (id.y * resolution) + id.x] = voxel;
}

[numthreads(8, 8, 8)]
void VoxelNormal(uint3 id : SV_DispatchThreadID)
{
    float3 p = (id * chunkScaling + offset) * scale;
    int index = flt(id);
    Voxel voxel = buffer[index];
    float3 normal = 0;
    normal.x = buffer[flt(uint3(1, 0, 0) + id)].density - buffer[flt(uint3(-1, 0, 0) + id)].density;
    normal.y = buffer[flt(uint3(0, 1, 0) + id)].density - buffer[flt(uint3(0, -1, 0) + id)].density;
    normal.z = buffer[flt(uint3(0, 0, 1) + id)].density - buffer[flt(uint3(0, 0, -1) + id)].density;
    normal = normalize(normal);

    voxel.normal = normal;
    voxel.color = Color(p, id / (float)resolution, normal);
    voxel.metallic = Metallic(p, id / (float)resolution, normal);
    voxel.smoothness = Smoothness(p, id / (float)resolution, normal);
    buffer[index] = voxel;
}